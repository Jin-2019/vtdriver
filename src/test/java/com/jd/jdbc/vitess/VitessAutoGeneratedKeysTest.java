/*
Copyright 2021 JD Project Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package com.jd.jdbc.vitess;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.Arrays;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import testsuite.TestSuite;
import testsuite.internal.TestSuiteShardSpec;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

/*
CREATE TABLE `auto` (
  `id` bigint(20) NOT NULL,
  `ai` bigint(20) NOT NULL AUTO_INCREMENT,
  `email` varbinary(128) DEFAULT NULL,
  PRIMARY KEY (`ai`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8
* */

/*
 * execute() --> CURD
 * executeQuery() --> R
 * executeUpdate() --> CUD
 * executeBatch() --> CUD
 *
 * only auto-increment filed return auto-generated-keys
 * */
public class VitessAutoGeneratedKeysTest extends TestSuite {
    private static final int[] colIndex = new int[] {1};

    private static final String[] colString = new String[] {"no matter what you input, it would be ignored."};

    private static final int[] int1x10Array = new int[10];

    private static final int[] int1x30Array = new int[30];

    static {
        Arrays.fill(int1x10Array, 1);
        Arrays.fill(int1x30Array, 1);
    }

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    protected String sql1 = "insert into auto (id,ai,email) values(1,1,'x')";

    protected String sql100 = "insert into auto (id,ai,email) values(1,100,'x')";

    protected String sqlx = "insert into auto (id,ai,email) values(?,?,'x')";

    protected String sqld = "insert into auto (id,ai,email) values(%d,%d,'x')";

    protected String updateSql = "update auto set email = 'zz' where id = %d";

    protected String updateSql100 = "update auto set email = 'zz' where id = 1";

    protected String deleteSql = "delete from auto where id = %d";

    protected String sql200 = "insert into auto (id,ai,email) values(200,200,'x')";

    protected String updatesql200 = "update auto set email = 'zz' where id = ?";

    protected String selete123 = "select id,ai,email from auto where ai=123";

    protected String selete100 = "select id,ai,email from auto where ai=100";

    protected String sql123 = "insert into auto (id,ai,email) values(123,123,'x')";

    protected String insertDuplicate = "insert into auto(id,ai) values(1,123) ON DUPLICATE KEY UPDATE email='zz'";

    protected String insertUpdate = "insert into auto(id,ai) values(2,100) ON DUPLICATE KEY UPDATE email='zz'";

    protected Connection conn;

    @Before
    public void testLoadDriver() throws Exception {
        getConn();
        clean();
    }

    protected void getConn() throws SQLException {
        conn = getConnection(Driver.of(TestSuiteShardSpec.TWO_SHARDS));
    }

    @After
    public void close() throws Exception {
        closeConnection(conn);
    }

    protected void clean() throws SQLException {
        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate("delete from auto");
        }
    }

    /***********************************************************************************************
     * Statement
     * ***********************************************************************************************/
    @Test
    public void test01StatementExecute() throws Exception {
        thrown.expect(SQLException.class);
        thrown.expectMessage("Generated keys not requested");
        try (Statement stmt = conn.createStatement()) {
            boolean rc = stmt.execute(sql1);
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());
            stmt.getGeneratedKeys();
        }
    }

    @Test
    public void test02StatementExecute() throws Exception {
        thrown.expect(SQLException.class);
        thrown.expectMessage("Generated keys not requested");
        try (Statement stmt = conn.createStatement()) {
            boolean rc = stmt.execute(sql1, Statement.NO_GENERATED_KEYS);
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());
            stmt.getGeneratedKeys();
        }
    }

    @Test
    public void test03StatementExecute() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            boolean rc = stmt.execute(sql100, Statement.RETURN_GENERATED_KEYS);
            checkStatementExecute(stmt, rc);
        }
    }

    @Test
    public void test03UpdateStatementExecute() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(sql100);
            boolean rc = stmt.execute(updateSql100, Statement.RETURN_GENERATED_KEYS);
            checkUpdateGenerate(stmt, rc);
        }
    }

    @Test
    public void test04StatementExecute() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            boolean rc = stmt.execute(sql100, colIndex);
            checkStatementExecute(stmt, rc);
        }
    }

    @Test
    public void test04UpdateStatementExecute() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(sql100);
            boolean rc = stmt.execute(updateSql100, colIndex);
            checkUpdateGenerate(stmt, rc);
        }
    }

    @Test
    public void test05StatementExecute() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            boolean rc = stmt.execute(sql100, colString);
            checkStatementExecute(stmt, rc);
        }
    }

    @Test
    public void test05UpdateStatementExecute() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(sql100);
            boolean rc = stmt.execute(updateSql100, colString);
            checkUpdateGenerate(stmt, rc);
        }
    }

    @Test
    public void test06StatementExecuteUpdate() throws Exception {
        thrown.expect(SQLException.class);
        thrown.expectMessage("Generated keys not requested");
        try (Statement stmt = conn.createStatement()) {
            int updateCount = stmt.executeUpdate(sql1);
            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());
            stmt.getGeneratedKeys();
        }
    }

    @Test
    public void test07StatementExecuteUpdate() throws Exception {
        thrown.expect(SQLException.class);
        thrown.expectMessage("Generated keys not requested");
        try (Statement stmt = conn.createStatement()) {
            int updateCount = stmt.executeUpdate(sql1, Statement.NO_GENERATED_KEYS);
            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());
            stmt.getGeneratedKeys();
        }
    }

    @Test
    public void test08StatementExecuteUpdate() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            int updateCount = stmt.executeUpdate(sql100, Statement.RETURN_GENERATED_KEYS);
            checkStatementExecuteUpdate(stmt, updateCount, 100);
        }
    }

    @Test
    public void test09StatementExecuteUpdate() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            int updateCount = stmt.executeUpdate(sql100, colIndex);
            checkStatementExecuteUpdate(stmt, updateCount, 100);
        }
    }

    @Test
    public void test10StatementExecuteUpdate() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            int updateCount = stmt.executeUpdate(sql100, colString);
            checkStatementExecuteUpdate(stmt, updateCount, 100);
        }
    }

    @Test
    public void test11StatementExecuteBatch() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            for (int i = 10; i < 20; i++) {
                stmt.addBatch(String.format(sqld, i, i));
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x10Array, rc);

            checkBatch(stmt);
        }
    }

    @Test
    public void test12StatementExecuteBatch() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            for (int i = 10; i < 20; i++) {
                stmt.addBatch(String.format(sqld, i, i));
                stmt.addBatch(String.format(updateSql, i));
                stmt.addBatch(String.format(deleteSql, i));
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x30Array, rc);

            checkBatch(stmt);
        }
    }

    @Test
    public void test12StatementUpdateExecuteBatch() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            for (int i = 10; i < 20; i++) {
                stmt.addBatch(String.format(sqld, i, i));
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x10Array, rc);
        }

        try (Statement stmt = conn.createStatement()) {
            for (int i = 10; i < 20; i++) {
                stmt.addBatch(String.format(updateSql, i));
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x10Array, rc);
            ResultSet generatedKeys = stmt.getGeneratedKeys();
            assertFalse(generatedKeys.next());
            checkGeneratedKeysMetaData(generatedKeys);
        }
    }

    /************************************************************************************************
     * PreparedStatement
     * ***********************************************************************************************/
    @Test
    public void test13PreparedStatementExecute() throws Exception {
        thrown.expect(SQLException.class);
        thrown.expectMessage("Generated keys not requested");
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, 1);
            stmt.setInt(2, 1);

            boolean rc = stmt.execute();
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());
            stmt.getGeneratedKeys();
        }
    }

    @Test
    public void test14PreparedStatementExecute() throws Exception {
        thrown.expect(SQLException.class);
        thrown.expectMessage("Generated keys not requested");
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.NO_GENERATED_KEYS)) {
            stmt.setInt(1, 1);
            stmt.setInt(2, 1);

            boolean rc = stmt.execute();
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());
            stmt.getGeneratedKeys();
        }
    }

    @Test
    public void test15PreparedStatementExecute() throws Exception {
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, 100);
            stmt.setInt(2, 100);

            boolean rc = stmt.execute();
            checkStatementExecute(stmt, rc);
        }
    }

    @Test
    public void test15PreparedUpdateStatementExecute() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(sql200);
        }
        String sql = updatesql200;
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, 200);
            boolean rc = stmt.execute();
            checkUpdateGenerate(stmt, rc);
        }
    }

    @Test
    public void test16PreparedStatementExecute() throws Exception {
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, colIndex)) {
            stmt.setInt(1, 100);
            stmt.setInt(2, 100);

            boolean rc = stmt.execute();
            checkStatementExecute(stmt, rc);
        }
    }

    @Test
    public void test16PreparedUpdateStatementExecute() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(sql200);
        }
        String sql = updatesql200;
        try (PreparedStatement stmt = conn.prepareStatement(sql, colIndex)) {
            stmt.setInt(1, 200);
            boolean rc = stmt.execute();
            checkUpdateGenerate(stmt, rc);
        }
    }

    @Test
    public void test17PreparedStatementExecute() throws Exception {
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, colString)) {
            stmt.setInt(1, 100);
            stmt.setInt(2, 100);

            boolean rc = stmt.execute();
            checkStatementExecute(stmt, rc);
        }
    }

    @Test
    public void test17PreparedUpdateStatementExecute() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(sql200);
        }
        String sql = updatesql200;
        try (PreparedStatement stmt = conn.prepareStatement(sql, colString)) {
            stmt.setInt(1, 200);
            boolean rc = stmt.execute();
            checkUpdateGenerate(stmt, rc);
        }
    }

    @Test
    public void test18PreparedStatementExecuteUpdate() throws Exception {
        thrown.expect(SQLException.class);
        thrown.expectMessage("Generated keys not requested");
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.NO_GENERATED_KEYS)) {
            stmt.setInt(1, 100);
            stmt.setInt(2, 100);

            int updateCount = stmt.executeUpdate();

            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());

            stmt.getGeneratedKeys();
        }
    }

    @Test
    public void test19PreparedStatementExecuteUpdate() throws Exception {
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, 100);
            stmt.setInt(2, 100);
            int updateCount = stmt.executeUpdate();
            checkStatementExecuteUpdate(stmt, updateCount, 100);
        }
    }

    @Test
    public void test20PreparedStatementExecuteBatch() throws Exception {
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.NO_GENERATED_KEYS)) {
            for (int i = 10; i < 20; i++) {
                stmt.setInt(1, i);
                stmt.setInt(2, i);
                stmt.addBatch();
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x10Array, rc);
            thrown.expect(SQLException.class);
            thrown.expectMessage("Generated keys not requested");
            stmt.getGeneratedKeys();
        }
    }

    @Test
    public void test21PreparedStatementExecuteBatch() throws Exception {
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            for (int i = 10; i < 20; i++) {
                stmt.setInt(1, i);
                stmt.setInt(2, i);
                stmt.addBatch();
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x10Array, rc);

            checkBatch(stmt);
        }
    }

    @Test
    public void test22PreparedStatementExecuteBatch() throws Exception {
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            for (int i = 10; i < 20; i++) {
                stmt.addBatch(String.format(sqld, i, i));
                stmt.addBatch(String.format(updateSql, i));
                stmt.addBatch(String.format(deleteSql, i));
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x30Array, rc);

            checkBatch(stmt);
        }
    }

    @Test
    public void test22PreparedStatementUpdateExecuteBatch() throws Exception {
        try (Statement stmt = conn.createStatement()) {
            for (int i = 10; i < 20; i++) {
                stmt.addBatch(String.format(sqld, i, i));
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x10Array, rc);
        }

        try (PreparedStatement stmt = conn.prepareStatement(updatesql200, Statement.RETURN_GENERATED_KEYS)) {
            for (int i = 10; i < 20; i++) {
                stmt.setInt(1, i);
                stmt.addBatch();
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x10Array, rc);
            ResultSet generatedKeys = stmt.getGeneratedKeys();
            assertFalse(generatedKeys.next());
            checkGeneratedKeysMetaData(generatedKeys);
        }
    }

    /***********************************************************************************************
     * Misc
     * ***********************************************************************************************/
    @Test
    public void test23SetNull() throws Exception {
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, 100);
            stmt.setInt(2, 1000);

            int updateCount = stmt.executeUpdate();

            checkStatementExecuteUpdate(stmt, updateCount, 1000);
            ResultSet generatedKeys;
            int count;

            //set null
            stmt.setInt(1, 100);
            stmt.setNull(2, 0);

            updateCount = stmt.executeUpdate();

            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());

            generatedKeys = stmt.getGeneratedKeys();
            count = 0;
            while (generatedKeys.next()) {
                assertTrue(generatedKeys.getLong(1) > 1000);
                count++;
            }
            assertEquals(1, count);
        }
    }

    @Test
    public void test24InsertDuplicateKeyGeGeneratedKeys() throws SQLException {
        clean();
        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(sql123);

            // insert
            stmt.executeUpdate(insertUpdate, Statement.RETURN_GENERATED_KEYS);
            ResultSet generated = stmt.getGeneratedKeys();
            while (generated.next()) {
                assertEquals(100, generated.getLong(1));
            }
            ResultSet selectResult = stmt.executeQuery(selete100);
            while (selectResult.next()) {
                assertEquals(2, selectResult.getLong(1));
                assertEquals(100, selectResult.getLong(2));
            }

            // update
            stmt.executeUpdate(insertDuplicate, Statement.RETURN_GENERATED_KEYS);
            ResultSet generated2 = stmt.getGeneratedKeys();
            while (generated2.next()) {
                assertEquals(123, generated2.getLong(1));
            }
            ResultSet selectResult2 = stmt.executeQuery(selete123);
            while (selectResult2.next()) {
                assertEquals(123, selectResult2.getLong(1));
                assertEquals(123, selectResult2.getLong(2));
                assertEquals("zz", selectResult2.getString(3));
            }
        }
    }

    @Test
    public void test25InsertDuplicateKeyUseExecuteBatch() throws Exception {
        int[] expectedRc = {1, 1, 2};
        int[] expectedGeneratedKeys = {100, 123, 123};
        clean();

        try (Statement stmt = conn.createStatement()) {
            stmt.addBatch(sql100);
            stmt.addBatch(sql123);
            stmt.addBatch(insertDuplicate);
            int[] rc = stmt.executeBatch();

            for (int i = 0; i < rc.length; i++) {
                assertEquals(expectedRc[i], rc[i]);
            }
            ResultSet generatedKeys = stmt.getGeneratedKeys();
            checkGeneratedKeysMetaData(generatedKeys);
            for (int i = 0; i < rc.length; i++) {
                generatedKeys.next();
                assertEquals(expectedGeneratedKeys[i], generatedKeys.getInt(1));
            }

            // check last_insert_id
            final ResultSet lastInsertIdResultSet = stmt.executeQuery("select last_insert_id()");
            Assert.assertTrue(lastInsertIdResultSet.next());
            Assert.assertEquals(123, lastInsertIdResultSet.getLong(1));
            Assert.assertFalse(lastInsertIdResultSet.next());
            // check last_insert_id
            final ResultSet identityResultSet = stmt.executeQuery("select @@identity");
            Assert.assertTrue(identityResultSet.next());
            Assert.assertEquals(123, identityResultSet.getLong(1));
            Assert.assertFalse(identityResultSet.next());

            ResultSet selectResult = stmt.executeQuery(selete123);
            while (selectResult.next()) {
                assertEquals(123, selectResult.getLong(1));
                assertEquals("zz", selectResult.getString(3));
            }
        }
    }

    private void checkStatementExecute(Statement stmt, boolean rc) throws SQLException {
        assertFalse(rc);
        assertEquals(1, stmt.getUpdateCount());

        ResultSet generatedKeys = stmt.getGeneratedKeys();
        int count = 0;
        while (generatedKeys.next()) {
            assertEquals(100, generatedKeys.getLong(1));
            count++;
        }
        assertEquals(1, count);
        checkGeneratedKeysMetaData(generatedKeys);
    }

    private void checkStatementExecuteUpdate(Statement stmt, int updateCount, int i) throws SQLException {
        assertEquals(1, updateCount);
        assertEquals(1, stmt.getUpdateCount());

        ResultSet generatedKeys = stmt.getGeneratedKeys();
        int count = 0;
        while (generatedKeys.next()) {
            assertEquals(i, generatedKeys.getLong(1));
            count++;
        }
        assertEquals(1, count);
        checkGeneratedKeysMetaData(generatedKeys);
    }

    private void checkUpdateGenerate(Statement stmt, boolean rc) throws SQLException {
        assertFalse(rc);
        assertEquals(1, stmt.getUpdateCount());
        ResultSet generatedKeys = stmt.getGeneratedKeys();
        assertFalse(generatedKeys.next());
        checkGeneratedKeysMetaData(generatedKeys);
    }

    public void checkGeneratedKeysMetaData(ResultSet generatedKeys) throws SQLException {
        ResultSetMetaData rsmd = generatedKeys.getMetaData();
        assertEquals(1, rsmd.getColumnCount());
        assertEquals(Types.BIGINT, rsmd.getColumnType(1));
        assertEquals("GENERATED_KEY", rsmd.getColumnLabel(1));
        assertEquals("java.math.BigInteger", rsmd.getColumnClassName(1));
        assertEquals(20, rsmd.getColumnDisplaySize(1));
        assertEquals(20, rsmd.getPrecision(1));
    }

    private void checkBatch(Statement stmt) throws SQLException {
        ResultSet generatedKeys = stmt.getGeneratedKeys();
        int count = 0;
        while (generatedKeys.next()) {
            assertEquals(count + 10, generatedKeys.getLong(1));
            count++;
        }
        assertEquals(10, count);
        checkGeneratedKeysMetaData(generatedKeys);
    }

}
